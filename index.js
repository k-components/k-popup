// Generated by CoffeeScript 1.10.0
(function() {
  var Popup,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Popup = (function() {
    function Popup() {
      this.keydown = bind(this.keydown, this);
      this.setPosition = bind(this.setPosition, this);
      this.removeKeydownEvent = bind(this.removeKeydownEvent, this);
      this.setKeydownEvent = bind(this.setKeydownEvent, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
    }

    Popup.prototype.view = __dirname;

    Popup.prototype.name = 'k-popup';

    Popup.prototype.destroy = function() {
      return this.removeKeydownEvent();
    };

    Popup.prototype.create = function() {
      var element;
      this.model.set('top', 'auto');
      this.model.set('left', 'auto');
      element = this.model.get('element');
      this.el = element ? document.getElementById(element) : this.popup.parentNode;
      if (this.el) {
        return this.el.addEventListener('click', this.show, false);
      }
    };

    Popup.prototype.show = function(e) {
      if (!this.model.get('show') && this.el && e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.model.get('pos')) {
          this.setPosition();
        }
        this.model.set('show', true);
        return this.setKeydownEvent();
      }
    };

    Popup.prototype.hide = function(e) {
      var h;
      h = (function(_this) {
        return function() {
          _this.model.del('show');
          return _this.model.del('hiding');
        };
      })(this);
      this.removeKeydownEvent();
      return this.model.set('hiding', true, function() {
        return setTimeout(h, 310);
      });
    };

    Popup.prototype.setKeydownEvent = function() {
      return document.addEventListener('keydown', this.keydown, true);
    };

    Popup.prototype.removeKeydownEvent = function() {
      return document.removeEventListener('keydown', this.keydown);
    };

    Popup.prototype.setPosition = function() {
      var adjust, rect;
      rect = this.el.getBoundingClientRect();
      this.model.set('top', rect.bottom + 10 + 'px');
      adjust = rect.right + 125 > window.innerWidth ? rect.right + 125 - window.innerWidth : 0;
      return this.model.set('left', (rect.left - adjust) + 'px');
    };

    Popup.prototype.keydown = function(e) {
      var key;
      key = e.keyCode || e.which;
      if (key === 27) {
        return this.hide();
      }
    };

    return Popup;

  })();

}).call(this);
